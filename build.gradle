apply plugin: 'java'

ext{
    projectPath    =   projectDir.getAbsolutePath()
}

sourceCompatibility = '1.8'
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

// NetBeans will automatically add "run" and "debug" tasks relying on the
// "mainClass" property. You may however define the property prior executing
// tasks by passing a "-PmainClass=<QUALIFIED_CLASS_NAME>" argument.
//
// Note however, that you may define your own "run" and "debug" task if you
// prefer. In this case NetBeans will not add these tasks but you may rely on
// your own implementation.
if (!hasProperty('mainClass')) {
    ext.mainClass = 'lh4.datagen.DataGenerator'
}

repositories {
    mavenCentral()
    // You may define additional repositories, or even remove "mavenCentral()".
    // Read more about repositories here:
    //   http://www.gradle.org/docs/current/userguide/dependency_management.html#sec:repositories
}

dependencies {
    // TODO: Add dependencies here ...
    // You can read more about how to add dependency here:
    //   http://www.gradle.org/docs/current/userguide/dependency_management.html#sec:how_to_declare_your_dependencies
    testCompile group: 'junit', name: 'junit', version: '4.10'
    compile group: 'com.beust', name: 'jcommander', version: '1.48'
}

task fatJar(type: Jar, dependsOn: 'build'){
    from(configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }) {
        exclude "META-INF/*.SF"
        exclude "META-INF/*.DSA"
        exclude "META-INF/*.RSA"
    }
    from files(sourceSets.main.output.classesDir, sourceSets.main.output.resourcesDir)
    zip64 true
    baseName 'training-datagen'
}

task runGen(type: JavaExec, dependsOn: ['build', 'fatJar']){
	classpath = sourceSets.main.runtimeClasspath
	standardInput = System.in
	main = 'lh4.datagen.DataGenerator'
	args "-ds", "${projectPath}/config/LinkHunterData.properties"
}
